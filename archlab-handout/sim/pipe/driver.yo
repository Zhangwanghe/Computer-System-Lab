                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6b802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 801601000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: 202a                 | 	rrmovq %rdx, %r10
0x03f: c0faffffffffffffffff | 	iaddq $-1, %r10		# len <= 1?
0x049: 71d700000000000000   | 	jle Rest		# if so, goto Done:
                            | 
0x052: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x05c: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x066: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x068: 717b00000000000000   | 	jle Npos1		# if so, goto Npos:
0x071: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x07b: 50a70800000000000000 | Npos1:	mrmovq 8(%rdi), %r10	# read val from src...
0x085: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
0x08f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x091: 71a400000000000000   | 	jle Npos2		# if so, goto Npos:
0x09a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x0a4: c0f2feffffffffffffff | Npos2:	iaddq $-2, %rdx		# len-=2
0x0ae: c0f71000000000000000 | 	iaddq $16, %rdi		# src+=2
0x0b8: c0f61000000000000000 | 	iaddq $16, %rsi		# dst+=2
0x0c2: 202a                 | 	rrmovq %rdx, %r10
0x0c4: c0faffffffffffffffff | 	iaddq $-1, %r10		# len <= 1?
0x0ce: 765200000000000000   | 	jg Loop			# if so, goto Loop:
0x0d7:                      | Rest:
0x0d7: 202a                 | 	rrmovq %rdx, %r10
0x0d9: c0faffffffffffffffff | 	iaddq $-1, %r10		# len <= 1?
0x0e3: 711501000000000000   | 	jle Done
0x0ec: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0f6: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x100: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x102: 711501000000000000   | 	jle Done		# if so, goto Done:
0x10b: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x115:                      | Done:
0x115: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x116:                      | End:
                            | #/* $end ncopy-ys */
0x116:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 2.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x116:                      | check:
                            | 	# Return value test
0x116: 30fa0200000000000000 | 	irmovq $2,%r10
0x120: 61a0                 | 	subq %r10,%rax
0x122: 733e01000000000000   | 	je checkb
0x12b: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x135: 707c02000000000000   | 	jmp cdone
0x13e:                      | checkb:
                            | 	# Code length check
0x13e: 30f01601000000000000 | 	irmovq EndFun,%rax
0x148: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x152: 6120                 | 	subq %rdx,%rax
0x154: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x15e: 6102                 | 	subq %rax,%rdx
0x160: 757c01000000000000   | 	jge checkm
0x169: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x173: 707c02000000000000   | 	jmp cdone
0x17c:                      | checkm:
0x17c: 30f2b802000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x186: 30f38002000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x190: 30f70400000000000000 | 	irmovq $4,%rdi  # Count
0x19a: 6277                 | 	andq %rdi,%rdi
0x19c: 73fa01000000000000   | 	je checkpre         # Skip check if count = 0
0x1a5:                      | mcloop:
0x1a5: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x1af: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x1b9: 6160                 | 	subq %rsi,%rax
0x1bb: 73d701000000000000   | 	je  mok
0x1c4: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x1ce: 707c02000000000000   | 	jmp cdone
0x1d7:                      | mok:
0x1d7: 30f00800000000000000 | 	irmovq $8,%rax
0x1e1: 6002                 | 	addq %rax,%rdx	  # dest ++
0x1e3: 6003                 | 	addq %rax,%rbx    # src++
0x1e5: 30f00100000000000000 | 	irmovq $1,%rax
0x1ef: 6107                 | 	subq %rax,%rdi    # cnt--
0x1f1: 76a501000000000000   | 	jg mcloop
0x1fa:                      | checkpre:
                            | 	# Check for corruption
0x1fa: 30f2b002000000000000 | 	irmovq Predest,%rdx
0x204: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x20e: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x218: 6120                 | 	subq %rdx,%rax
0x21a: 733602000000000000   | 	je checkpost
0x223: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x22d: 707c02000000000000   | 	jmp cdone
0x236:                      | checkpost:
                            | 	# Check for corruption
0x236: 30f2d802000000000000 | 	irmovq Postdest,%rdx
0x240: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x24a: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x254: 6120                 | 	subq %rdx,%rax
0x256: 737202000000000000   | 	je checkok
0x25f: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x269: 707c02000000000000   | 	jmp cdone
0x272:                      | checkok:
                            | 	# Successful checks
0x272: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x27c:                      | cdone:
0x27c: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x280:                      | 	.align 8
0x280:                      | src:
0x280: 0100000000000000     | 	.quad 1
0x288: feffffffffffffff     | 	.quad -2
0x290: fdffffffffffffff     | 	.quad -3
0x298: 0400000000000000     | 	.quad 4
0x2a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2b0:                      | 	.align 16
0x2b0:                      | Predest:
0x2b0: fadebc0000000000     | 	.quad 0xbcdefa
0x2b8:                      | dest:
0x2b8: abefcd0000000000     | 	.quad 0xcdefab
0x2c0: abefcd0000000000     | 	.quad 0xcdefab
0x2c8: abefcd0000000000     | 	.quad 0xcdefab
0x2d0: abefcd0000000000     | 	.quad 0xcdefab
0x2d8:                      | Postdest:
0x2d8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x2e0:                      | .align 8
                            | # Run time stack
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
                            | 
0x360:                      | Stack:
